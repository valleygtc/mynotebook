import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';


function readData() {
    // TODO
    return [
        {
            'id': 1,
            'level': 0,
            'parentId': null,
            'title': 'book1',
            'content': 'testtttttt contetn'
        },
        {
            'id': 2,
            'level': 1,
            'parentId': 1,
            'title': 'parentNode1',
            'content': 'testtttttt contetn'
        },
        {
            'id': 3,
            'level': 2,
            'parentId': 2,
            'title': 'p1-subNode1',
            'content': 'testtttttt contetn'
        },
        {
            'id': 4,
            'level': 2,
            'parentId': 2,
            'title': 'p2-subNode2',
            'content': 'testtttttt contetn'
        },
        {
            'id': 5,
            'level': 1,
            'parentId': 1,
            'title': 'parentNode2',
            'content': 'testtttttt contetn'
        },
        {
            'id': 6,
            'level': 0,
            'parentId': null,
            'title': 'book2',
            'content': 'testtttttt contetn222222222222222222222'
        },
        {
            'id': 7,
            'level': 1,
            'parentId': 6,
            'title': 'node1',
            'content': 'testtttttt contetn'
        },
        {
            'id': 8,
            'level': 1,
            'parentId': 6,
            'title': 'node2',
            'content': 'testtttttt contetn'
        }
    ];
}


const otherExpandChains = [
    [1, 2]
];

const activeChain = [1, 5];


function renderTopBarNodes(nodes, currentNodeIndex) {
    const items = [];
    for (const [index, node] of nodes.entries()) {
        items.push(
            <Node key={node.id} title={node.title} active={index === currentNodeIndex ? true : false} />
        );
    }
    return items;
}


function TopBar({nodes, currentNodeIndex}) {
    return (<div
        style={{
            gridColumn: '1/3',
            borderBottom: '1px solid black',
            display: 'flex',
            flexWrap: 'wrap'
        }}>
          {renderTopBarNodes(nodes, currentNodeIndex)}
    </div>);
}


function renderSideBarNodes(nodes) {
    /**
     * Params:
     *     nodes [Array[Object]]: [
     *     {
     *         'parentNode': [Object],
     *         'subNodes': [Array[Object]]
     *     },
     *     ...
     *     ]
     */
    const items = [];
    for (const nodeBlock of nodes) {
        const parentNode = nodeBlock.parentNode;
        const hasArrow = nodeBlock.subNodes ? true : false;
        items.push(
            <Node key={parentNode.id}
                    title={parentNode.title}
                    hasArrow={hasArrow}
                    expand={parentNode.expand}
                    active={parentNode.active} />
        );
        if (nodeBlock.subNodes) {
            items.concat(renderSideBarNodes(nodeBlock.subNodes))
        }
    }
    return items;
}


function SideBar({nodes}) {
    return (<div
        style={{
            borderLeft: '1px solid black',
            display: 'flex',
            flexDirection: 'column'
        }}>
          {renderSideBarNodes(nodes)}
    </div>);
}


function Node({title, hasArrow, expand, active}) {
    let arrow;
    if (hasArrow) {
        if (expand) {
            arrow = <span>{'v'}</span>
        } else {
            arrow = <span>{'>'}</span>
        }
    } else {
        arrow = null;
    }
    return (<div
        style={{
            border: '1px solid black',
            backgroundColor: active ? 'green' : 'white'
        }}>
      {arrow}
      <span>{title}</span>
    </div>);
}


function Page({content}) {
    return (<div>{content}</div>);
}



class App extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            hierarchy: read
        };
    }
    const topBarNodes = [];
    const sideBarNodes = [];
    for (const node of nodes) {
        if (node.level === 0) {
            topBarNodes.push(node);
        } else {
            sideBarNodes.push(node);
        }
    }
    const topBarCurrentNode = nodes[currentNodeIndexChain[0]];
    let topBarCurrentNodeIndex;
    for (const [index, node] of topBarNodes.entries()) {
        if (node.id === topBarCurrentNode.id) {
            topBarCurrentNodeIndex = index;
        }
    }
    let sideBarCurrentNodeIndexChain = [];
    for (const [index, node] of sideBarNodes.entries()) {
        if (sideBarCurrentNodeIndexChain.length === currentNodeIndexChain.length - 1) {
            break;
        }
        const toMatchNode = nodes[currentNodeIndexChain[sideBarCurrentNodeIndexChain.length + 1]];
        if (node.id === toMatchNode.id) {
            sideBarCurrentNodeIndexChain.push(index);
        }
    }
    return (<div
        style={{
            height: '100%',
            width: '100%',
            display: 'grid',
            gridTemplateRows: '5% 95%',
            gridTemplateColumns: '80% 20%'
        }}>
          <TopBar nodes={topBarNodes} currentNodeIndex={topBarCurrentNodeIndex} />
          <Page content={nodes[currentNodeIndexChain[currentNodeIndexChain.length - 1]].content}></Page>
          <SideBar nodes={sideBarNodes} currentNodeIndex={sideBarCurrentNodeIndexChain} />
    </div>);
}

ReactDOM.render(<App nodes={nodes} currentNodeIndex={[0, 1]} />, document.getElementById('root'))
